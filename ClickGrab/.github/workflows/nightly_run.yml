name: Nightly ClickGrab Analysis

on:
  schedule:
    # Runs "At 01:00 UTC every day"
    - cron: '0 1 * * *'
  workflow_dispatch:

permissions:
  contents: write 

jobs:
  run_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create required directories
        run: |
          mkdir -p nightly_reports
          mkdir -p docs/assets/images
          mkdir -p analysis
          mkdir -p templates/css
          mkdir -p public
          echo "Created all required directories"

      - name: Copy logo files
        run: |
          # Copy logo file - try multiple locations
          if [ -f "assets/logo.png" ]; then
            cp assets/logo.png docs/assets/images/logo.png
            echo "Copied logo from assets/ directory"
          elif [ -f "assets/images/logo.png" ]; then
            cp assets/images/logo.png docs/assets/images/logo.png
            echo "Copied logo from assets/images/ directory"
          elif [ -f "logo.png" ]; then
            cp logo.png docs/assets/images/logo.png
            echo "Copied logo from root directory"
          else
            echo "Logo not found - creating placeholder"
            echo "Logo not found. Please add logo.png to your repository." > docs/assets/images/logo.png
          fi

      - name: Run ClickGrab Python Analysis
        run: |
          TODAY=$(date +%Y-%m-%d)
          echo "Running ClickGrab analysis for $TODAY"
          
          # Set encoding for proper UTF-8 handling
          export PYTHONIOENCODING=utf-8
          
          # Run the enhanced Python analyzer with URLhaus integration
          # This replaces the PowerShell script entirely and provides much richer data
          python clickgrab.py --download --output-dir nightly_reports --format all --debug
          
          echo "ClickGrab Python analysis complete"

      - name: Process Reports and Generate Site
        run: |
          TODAY=$(date +%Y-%m-%d)
          
          # Find the latest JSON report generated by clickgrab.py
          LATEST_JSON=$(find nightly_reports -name "*.json" -type f -printf "%T@ %p\n" | sort -n | tail -1 | cut -d' ' -f2-)
          
          if [ -n "$LATEST_JSON" ]; then
            echo "Found latest JSON report: $LATEST_JSON"
            
            # Copy to standardized locations for compatibility
            cp "$LATEST_JSON" latest_consolidated_report.json
            
            # Also create a date-only filename version that build.py expects
            # This ensures both analyze.py and build.py can find the reports
            cp "$LATEST_JSON" "nightly_reports/clickgrab_report_${TODAY}.json"
            
            # Find the latest HTML report and copy it
            LATEST_HTML=$(find nightly_reports -name "*.html" -type f -printf "%T@ %p\n" | sort -n | tail -1 | cut -d' ' -f2-)
            if [ -n "$LATEST_HTML" ]; then
              echo "Found latest HTML report: $LATEST_HTML"
              cp "$LATEST_HTML" docs/latest_report.html
              cp "$LATEST_HTML" "docs/report_${TODAY}.html"
              
              # Also create a standardized filename for nightly_reports
              cp "$LATEST_HTML" "nightly_reports/clickgrab_report_${TODAY}.html"
            fi
            
            # Display report content summary for debugging
            echo "=== Report Summary ==="
            jq -r '.summary // {} | to_entries | .[] | "\(.key): \(.value)"' "$LATEST_JSON" || echo "Could not parse summary"
            echo "Total sites in report: $(jq -r '.sites | length' "$LATEST_JSON" 2>/dev/null || echo 'Unknown')"
            echo "===================="
          else
            echo "Warning: No JSON reports found in nightly_reports directory"
            ls -la nightly_reports/ || echo "nightly_reports directory is empty"
          fi

      - name: Run Advanced Analysis and Blog Generation
        run: |
          TODAY=$(date +%Y-%m-%d)
          echo "Running advanced threat intelligence analysis for $TODAY"
          
          # Run the advanced analyzer to generate blog data
          python bin/analyze.py -d "$TODAY" -v
          
          echo "Advanced analysis complete"

      - name: Build Website with Jinja2 Templates
        run: |
          echo "Building website with enhanced templates and blog posts"
          
          # Generate the complete website including analysis pages
          python bin/build.py
          
          # Copy generated site to docs for GitHub Pages
          if [ -d "public" ]; then
            # Clean docs directory first (but preserve .git if it exists)
            find docs -mindepth 1 -not -path 'docs/.git*' -delete 2>/dev/null || true
            
            # Create docs directory if it doesn't exist
            mkdir -p docs
            
            # Copy all files from public to docs
            cp -r public/* docs/
            
            # Verify the copy worked
            echo "Files in public/reports: $(ls public/reports 2>/dev/null | wc -l || echo 0)"
            echo "Files in docs/reports: $(ls docs/reports 2>/dev/null | wc -l || echo 0)"
            
            echo "Copied generated site to docs folder for GitHub Pages"
          fi
          
          echo "Website build complete"

      - name: Verify Generated Files
        run: |
          echo "Verifying generated files..."
          echo "=== Docs directory ==="
          find docs -type f -name "*.html" | head -10
          echo "=== Analysis directory ==="
          find analysis -type f | head -10
          echo "=== Nightly reports directory ==="
          find nightly_reports -type f | head -10
          
          # Check if key files exist
          if [ -f "docs/index.html" ]; then
            echo "✅ Main index.html exists"
          else
            echo "❌ Missing main index.html"
          fi
          
          if [ -f "docs/analysis.html" ]; then
            echo "✅ Analysis page exists"
          else
            echo "❌ Missing analysis page"
          fi
          
          if [ -f "latest_consolidated_report.json" ]; then
            echo "✅ Latest consolidated report exists"
          else
            echo "❌ Missing latest consolidated report"
          fi

      - name: Commit and Push Results
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Add all generated files
          git add latest_consolidated_report.json
          git add nightly_reports/
          git add docs/
          git add analysis/
          git add public/ || true  # May not exist, that's ok
          
          # Get today's date for commit message
          TODAY=$(date +%Y-%m-%d)
          
          # Check if there are changes to commit
          if ! git diff --staged --quiet; then
            echo "Changes detected, committing..."
            git commit -m "chore: Update nightly analysis results ($TODAY)" \
                       -m "- Enhanced threat intelligence analysis" \
                       -m "- Advanced pattern detection and obfuscation analysis" \
                       -m "- Automated blog post generation" \
                       -m "- Updated website with latest threat data"
            git push
            echo "Successfully pushed changes"
          else
            echo "No changes to commit"
          fi 